// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int      @id @default(autoincrement())
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  profile    Profile?

  @@map("user")
}

model Profile {
  profile_id        Int      @id @default(autoincrement())
  first_name        String
  connected_account String
  photo             String
  is_verified       Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  user      User   @relation(fields: [userEmail], references: [email])
  userEmail String @unique

  question      Question[]
  comment       Comment[]
  questionLikes QuestionLikes[]
  commentLikes  CommentLikes[]

  @@map("profile")
}

model Question {
  question_id   Int             @id @default(autoincrement())
  title         String
  body          String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  category      Category?       @relation(fields: [category_id], references: [category_id])
  category_id   Int?
  author        Profile?        @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id    Int?
  comment       Comment[]
  questionLikes QuestionLikes[]

  @@map("question")
}

model QuestionLikes {
  question    Question @relation(fields: [question_id], references: [question_id])
  question_id Int
  author      Profile  @relation(fields: [profile_id], references: [profile_id])
  profile_id  Int

  @@id([profile_id, question_id])
}

model CommentLikes {
  comment    Comment @relation(fields: [comment_id], references: [comment_id])
  comment_id Int
  author     Profile @relation(fields: [profile_id], references: [profile_id])
  profile_id Int

  @@id([comment_id, profile_id])
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  title      String
  body       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  author       Profile?       @relation(fields: [profile_id], references: [profile_id], onDelete: Cascade)
  profile_id   Int?
  question     Question?      @relation(fields: [question_id], references: [question_id])
  question_id  Int?
  commentLikes CommentLikes[]

  @@map("comment")
}

model Category {
  category_id Int      @id @default(autoincrement())
  name        String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  question Question[]

  @@map("category")
}
